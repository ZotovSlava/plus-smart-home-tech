package ru.yandex.practicum.service.handler;

import com.google.protobuf.Timestamp;
import lombok.extern.slf4j.Slf4j;
import net.devh.boot.grpc.client.inject.GrpcClient;
import org.springframework.stereotype.Service;
import ru.yandex.practicum.grpc.telemetry.event.ActionTypeProto;
import ru.yandex.practicum.grpc.telemetry.event.DeviceActionProto;
import ru.yandex.practicum.grpc.telemetry.event.DeviceActionRequest;
import ru.yandex.practicum.grpc.telemetry.hubrouter.HubRouterControllerGrpc;
import ru.yandex.practicum.kafka.telemetry.event.*;
import ru.yandex.practicum.model.Action;
import ru.yandex.practicum.model.Condition;
import ru.yandex.practicum.model.scenario.Scenario;
import ru.yandex.practicum.model.scenario.ScenarioAction;
import ru.yandex.practicum.model.scenario.ScenarioCondition;
import ru.yandex.practicum.repository.ScenarioRepository;
import ru.yandex.practicum.repository.SensorRepository;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
public class SnapshotService {

    private final SensorRepository sensorRepository;
    private final ScenarioRepository scenarioRepository;
    private final HubRouterControllerGrpc.HubRouterControllerBlockingStub hubRouterClient;

    public SnapshotService(@GrpcClient("hub-router")
                           HubRouterControllerGrpc.HubRouterControllerBlockingStub hubRouterClient,
                           SensorRepository sensorRepository,
                           ScenarioRepository scenarioRepository) {
        this.hubRouterClient = hubRouterClient;
        this.sensorRepository = sensorRepository;
        this.scenarioRepository = scenarioRepository;
    }

    public void handleRecord(SensorsSnapshotAvro record) {
        log.info("‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ snapshot –Ω–∞—á–∞—Ç–∞ –¥–ª—è —Ö–∞–±–∞: {}", record.getHubId());

        try {
            String hubId = record.getHubId();

            Map<String, SensorStateAvro> sensorsState = record.getSensorsState();
            log.info("üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤ –≤ snapshot: {}", sensorsState.size());

            List<Scenario> scenarios = scenarioRepository.findByHubId(hubId);
            log.info("üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è —Ö–∞–±–∞ {}: {}", hubId, scenarios.size());

            if (scenarios.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è —Ö–∞–±–∞ {}", hubId);
            }

            for (Scenario scenario : scenarios) {
                String scenarioName = scenario.getName();
                log.info("üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: {}", scenarioName);

                List<Integer> switchExecution = new ArrayList<>();

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤ –≤ –ë–î
                boolean sensorsExist = sensorRepository.existsByIdInAndHubId(sensorsState.keySet(), hubId);
                log.info("üîé –°–µ–Ω—Å–æ—Ä—ã –∏–∑ snapshot —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î –¥–ª—è —Ö–∞–±–∞ {}: {}", hubId, sensorsExist);
                if (!sensorsExist) {
                    log.warn("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤ –≤ –ë–î –¥–ª—è —Ö–∞–±–∞ {}", hubId);
                    continue;
                }

                for (ScenarioCondition scCondition : scenario.getConditions()) {
                    Condition condition = scCondition.getCondition();
                    String sensorId = scCondition.getSensor().getId();

                    log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–µ–Ω—Å–æ—Ä–∞ {}", sensorId);
                    SensorStateAvro state = sensorsState.get(sensorId);
                    if (state == null) {
                        log.warn("‚ùå –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–µ–Ω—Å–æ—Ä–∞ {} –≤ snapshot", sensorId);
                        switchExecution.add(0);
                        continue;
                    }

                    boolean matched = checkCondition(condition, state);
                    log.debug("‚úÖ –£—Å–ª–æ–≤–∏–µ –¥–ª—è —Å–µ–Ω—Å–æ—Ä–∞ {} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {}", sensorId, matched);
                    switchExecution.add(matched ? 1 : 0);
                }

                if (!switchExecution.isEmpty() && !switchExecution.contains(0)) {
                    log.info("‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {}", scenarioName);
                    for (ScenarioAction scAction : scenario.getActions()) {
                        Action action = scAction.getAction();
                        String sensorId = scAction.getSensor().getId();
                        sendAction(hubId, scenarioName, sensorId, action);
                    }
                } else {
                    log.info("üö´ –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {}", scenarioName);
                }
            }

            log.info("‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ snapshot –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —Ö–∞–±–∞: {}", hubId);

        } catch (Exception e) {
            log.error("üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ snapshot –¥–ª—è —Ö–∞–±–∞ {}", record.getHubId(), e);
        }
    }

    private boolean checkCondition(Condition condition, SensorStateAvro state) {
        String type = condition.getType();
        String operation = condition.getOperation();
        Long expectedValue = condition.getValue();

        log.trace("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è: —Ç–∏–ø={}, –æ–ø–µ—Ä–∞—Ü–∏—è={}, –∑–Ω–∞—á–µ–Ω–∏–µ={}", type, operation, expectedValue);

        try {
            return switch (type) {
                case "SWITCH" -> {
                    SwitchSensorEventAvro data = (SwitchSensorEventAvro) state.getData();
                    yield compareBooleanCondition(operation, expectedValue, data.getState());
                }
                case "MOTION" -> {
                    MotionSensorEventAvro data = (MotionSensorEventAvro) state.getData();
                    yield compareBooleanCondition(operation, expectedValue, data.getMotion());
                }
                case "LUMINOSITY" -> {
                    LightSensorEventAvro data = (LightSensorEventAvro) state.getData();
                    yield compareNumericCondition(operation, expectedValue, data.getLuminosity());
                }
                case "CO2LEVEL" -> {
                    ClimateSensorEventAvro data = (ClimateSensorEventAvro) state.getData();
                    yield compareNumericCondition(operation, expectedValue, data.getCo2Level());
                }
                case "HUMIDITY" -> {
                    ClimateSensorEventAvro data = (ClimateSensorEventAvro) state.getData();
                    yield compareNumericCondition(operation, expectedValue, data.getHumidity());
                }
                case "TEMPERATURE" -> {
                    Object data = state.getData();
                    if (data instanceof TemperatureSensorEventAvro tempData) {
                        yield compareNumericCondition(operation, expectedValue, tempData.getTemperatureC());
                    } else if (data instanceof ClimateSensorEventAvro climateData) {
                        yield compareNumericCondition(operation, expectedValue, climateData.getTemperatureC());
                    }
                    yield false;
                }
                default -> {
                    log.warn("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É—Å–ª–æ–≤–∏—è: {}", type);
                    yield false;
                }
            };
        } catch (Exception e) {
            log.error("üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å–ª–æ–≤–∏—è: {}", e.getMessage(), e);
            return false;
        }
    }

    private boolean compareBooleanCondition(String operation, Long expectedValue, boolean actual) {
        log.trace("‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—É–ª–µ–≤–æ: expected={}, actual={}, operation={}", expectedValue, actual, operation);
        return "EQUALS".equals(operation) && ((expectedValue == 1 && actual) || (expectedValue == 0 && !actual));
    }

    private boolean compareNumericCondition(String operation, Long expectedValue, int actualValue) {
        log.trace("‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–∏—Å–µ–ª: expected={}, actual={}, operation={}", expectedValue, actualValue, operation);
        return switch (operation) {
            case "EQUALS" -> expectedValue == actualValue;
            case "GREATER_THAN" -> expectedValue < actualValue;
            case "LOWER_THAN" -> expectedValue > actualValue;
            default -> false;
        };
    }

    private void sendAction(String hubId, String scenarioName, String sensorId, Action action) {
        log.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: —Ö–∞–±={}, —Å—Ü–µ–Ω–∞—Ä–∏–π={}, —Å–µ–Ω—Å–æ—Ä={}, —Ç–∏–ø={}",
                hubId, scenarioName, sensorId, action.getType());

        Instant time = Instant.now();
        Timestamp timestamp = Timestamp.newBuilder()
                .setSeconds(time.getEpochSecond())
                .setNanos(time.getNano())
                .build();

        DeviceActionProto.Builder actionBuilder = DeviceActionProto.newBuilder()
                .setSensorId(sensorId)
                .setType(ActionTypeProto.valueOf(action.getType()));

        if ("SET_VALUE".equals(action.getType())) {
            actionBuilder.setIntValue(action.getValue().intValue());
            log.trace("üõ† –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è: {}", action.getValue());
        }

        DeviceActionRequest request = DeviceActionRequest.newBuilder()
                .setHubId(hubId)
                .setScenarioName(scenarioName)
                .setAction(actionBuilder.build())
                .setTimestamp(timestamp)
                .build();

        try {
            hubRouterClient.handleDeviceAction(request);
            log.info("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
        } catch (Exception e) {
            log.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–µ–Ω—Å–æ—Ä–∞ {}: {}", sensorId, e.getMessage(), e);
        }
    }
}


